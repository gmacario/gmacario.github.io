{"pageProps":{"post":{"title":"Deploying WordPress and MySQL with Persistent Volumes on GKE","content":"<!-- markdown-link-check-disable -->\n\n<!-- 2018-10-16 12:29 CEST -->\n\n<p>This article explains how to set up a single-replica <a href=\"https://wordpress.com/\">WordPress</a> deployment\nand a single-replica <a href=\"https://www.mysql.com/\">MySQL</a> database on your <a href=\"https://kubernetes.io/\">Kubernetes</a> cluster\non the <a href=\"https://console.cloud.google.com/\">Google Cloud Platform</a>.</p>\n<p>Both applications use <a href=\"https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes\">PersistentVolumes</a> (PV)\nand <a href=\"https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes\">PersistentVolumeClaims</a> (PVC) to store data.</p>\n<p><strong>NOTE</strong>: This deployment is not meant for production use cases as it uses single instance WordPress and MySQL Pods.\nI will discuss how to deploy a redundant configuration of web front-end and database in a future post.</p>\n<h3 id=\"references\">References</h3>\n<p>The instructions documented in this article were based on the following resources:</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/\">https://kubernetes.io/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/</a></li>\n<li><a href=\"https://cloud.google.com/kubernetes-engine/docs/tutorials/persistent-disk\">https://cloud.google.com/kubernetes-engine/docs/tutorials/persistent-disk</a></li>\n<li><a href=\"https://github.com/GoogleCloudPlatform/kubernetes-engine-samples\">https://github.com/GoogleCloudPlatform/kubernetes-engine-samples</a></li>\n</ul>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<p>Access to a <a href=\"https://console.cloud.google.com/kubernetes/list\">Kubernetes cluster</a> already created on the Google Cloud Platform</p>\n<h3 id=\"step-1-preparation\">Step 1: Preparation</h3>\n<h4 id=\"check-prerequisites\">Check prerequisites</h4>\n<p>Let us assume we have already created a GKE cluster and started a Cloud Shell</p>\n<pre><code class=\"language-shell\">gcloud config set project kubernetes-workshop-218213\ngcloud container clusters get-credentials howlernoon --zone=europe-west1-b\nkubectl config use-context gke_kubernetes-workshop-218213_europe-west1-b_howlernoon\nkubectl get nodes\n</code></pre>\n<p>Result</p>\n<pre><code>gmacario@cloudshell:~ (kubernetes-workshop-218213)$ kubectl get nodes\nNAME                                        STATUS    ROLES     AGE       VERSION\ngke-howlernoon-default-pool-844aa4f7-5n4j   Ready     &lt;none&gt;    1d        v1.9.7-gke.6\ngke-howlernoon-default-pool-844aa4f7-8zxl   Ready     &lt;none&gt;    1d        v1.9.7-gke.6\ngke-howlernoon-default-pool-844aa4f7-mrv2   Ready     &lt;none&gt;    1d        v1.9.7-gke.6\ngmacario@cloudshell:~ (kubernetes-workshop-218213)$\n</code></pre>\n<h4 id=\"clone-kubernetes-engine-samples-repository\">Clone kubernetes-engine-samples repository</h4>\n<p>Logged as gmacario@cloudshell, clone the GKE samples repository:</p>\n<pre><code class=\"language-shell\">mkdir -p ~/github/GoogleCloudPlatform\ncd ~/github/GoogleCloudPlatform\ngit clone https://github.com/GoogleCloudPlatform/kubernetes-engine-samples\ncd kubernetes-engine-samples/wordpress-persistent-disks\nls -la\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ ls -la\ntotal 36\ndrwxr-xr-x  2 gmacario gmacario 4096 Oct 16 15:28 .\ndrwxr-xr-x 13 gmacario gmacario 4096 Oct 16 15:28 ..\n-rw-r--r--  1 gmacario gmacario  155 Oct 16 15:28 mysql-service.yaml\n-rw-r--r--  1 gmacario gmacario  168 Oct 16 15:28 mysql-volumeclaim.yaml\n-rw-r--r--  1 gmacario gmacario  787 Oct 16 15:28 mysql.yaml\n-rw-r--r--  1 gmacario gmacario  152 Oct 16 15:28 README.md\n-rw-r--r--  1 gmacario gmacario  209 Oct 16 15:28 wordpress-service.yaml\n-rw-r--r--  1 gmacario gmacario  172 Oct 16 15:28 wordpress-volumeclaim.yaml\n-rw-r--r--  1 gmacario gmacario  878 Oct 16 15:28 wordpress.yaml\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<h3 id=\"step-2-create-persistentvolumeclaims-and-persistentvolumes\">Step 2: Create PersistentVolumeClaims and PersistentVolumes</h3>\n<p>Logged as gmacario@cloudshell, create the PersistentVolumeClaims required for the deployments:</p>\n<pre><code class=\"language-shell\">kubectl apply -f mysql-volumeclaim.yaml\nkubectl apply -f wordpress-volumeclaim.yaml\n</code></pre>\n<p>Contents of <code>mysql-volumeclaim.yaml</code></p>\n<pre><code class=\"language-yaml\">kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: mysql-volumeclaim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 200Gi\n</code></pre>\n<p>Contents of <code>wordpress-volumeclaim.yaml</code></p>\n<pre><code class=\"language-yaml\">kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: wordpress-volumeclaim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 200Gi\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl apply -f mysql-volumeclaim.yaml\npersistentvolumeclaim &quot;mysql-volumeclaim&quot; created\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl apply -f wordpress-volumeclaim.yaml\npersistentvolumeclaim &quot;wordpress-volumeclaim&quot; created\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<p>Check if the claims get bound:</p>\n<pre><code class=\"language-shell\">kubectl get persistentvolumeclaims\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl get persistentvolumeclaims\nNAME                    STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nmysql-volumeclaim       Bound     pvc-b4cd3770-d147-11e8-8172-42010a8401ee   200Gi      RWO            standard       1m\nwordpress-volumeclaim   Bound     pvc-be4103f6-d147-11e8-8172-42010a8401ee   200Gi      RWO            standard       1m\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<h3 id=\"step-3-set-up-mysql\">Step 3: Set up MySQL</h3>\n<h4 id=\"create-a-secret-for-mysql-password\">Create a Secret for MySQL Password</h4>\n<p>Logged as gmacario@cloudshell, run the following command (and replace <code>YOUR_PASSWORD</code> with a passphrase of your choice):</p>\n<pre><code class=\"language-shell\">kubectl create secret generic mysql --from-literal=password=YOUR_PASSWORD\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~ (kubernetes-workshop-218213)$ kubectl create secret generic mysql --from-literal=password=xxxx\nsecret &quot;mysql&quot; created\ngmacario@cloudshell:~ (kubernetes-workshop-218213)$\n</code></pre>\n<h4 id=\"deploy-mysql\">Deploy MySQL</h4>\n<p>Logged as gmacario@cloudshell, use the <code>mysql.yaml</code> manifest file to deploy the single instance MySQL application running on port <code>3306</code>:</p>\n<pre><code class=\"language-shell\">kubectl create -f mysql.yaml\n</code></pre>\n<p>Contents of <code>mysql.yaml</code></p>\n<pre><code class=\"language-yaml\">apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: mysql\n  labels:\n    app: mysql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n        - image: mysql:5.6\n          name: mysql\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: mysql\n                  key: password\n          ports:\n            - containerPort: 3306\n              name: mysql\n          volumeMounts:\n            - name: mysql-persistent-storage\n              mountPath: /var/lib/mysql\n      volumes:\n        - name: mysql-persistent-storage\n          persistentVolumeClaim:\n            claimName: mysql-volumeclaim\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl create -f mysql.yaml\ndeployment.extensions &quot;mysql&quot; created\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<p>Check that the pod is running with <code>kubectl get pods -l app=mysql</code> (it might take a few minutes):</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl get pods -l app=mysql\nNAME                    READY     STATUS    RESTARTS   AGE\nmysql-d55697945-h7thb   1/1       Running   0          1m\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<h4 id=\"create-mysql-service\">Create MySQL service</h4>\n<p>Logged as gmacario@cloudshell, create a Service to expose the MySQL container and make it accessible from the <code>wordpress</code> container you are going to create.</p>\n<pre><code class=\"language-shell\">kubectl create -f mysql-service.yaml\n</code></pre>\n<p>Contents of <code>mysql-service.yaml</code></p>\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: Service\nmetadata:\n  name: mysql\n  labels:\n    app: mysql\nspec:\n  type: ClusterIP\n  ports:\n    - port: 3306\n  selector:\n    app: mysql\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl create -f mysql-service.yaml\nservice &quot;mysql&quot; created\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<p>Check to see if the Service is created</p>\n<pre><code class=\"language-shell\">kubectl get service mysql\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl get service mysql\nNAME      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\nmysql     ClusterIP   10.35.247.32   &lt;none&gt;        3306/TCP   52s\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<h3 id=\"step-4-set-up-wordpress\">Step 4: Set up WordPress</h3>\n<h4 id=\"deploy-wordpress\">Deploy WordPress</h4>\n<p>Logged as gmacario@cloudshell</p>\n<pre><code class=\"language-shell\">kubectl create -f wordpress.yaml\n</code></pre>\n<p>Contents of <code>wordpress.yaml</code></p>\n<pre><code class=\"language-yaml\">apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: wordpress\n  labels:\n    app: wordpress\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: wordpress\n  template:\n    metadata:\n      labels:\n        app: wordpress\n    spec:\n      containers:\n        - image: wordpress\n          name: wordpress\n          env:\n          - name: WORDPRESS_DB_HOST\n            value: mysql:3306\n          - name: WORDPRESS_DB_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                name: mysql\n                key: password\n          ports:\n            - containerPort: 80\n              name: wordpress\n          volumeMounts:\n            - name: wordpress-persistent-storage\n              mountPath: /var/www/html\n      volumes:\n        - name: wordpress-persistent-storage\n          persistentVolumeClaim:\n            claimName: wordpress-volumeclaim\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl create -f wordpress.yaml\ndeployment.extensions &quot;wordpress&quot; created\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<p>Type <code>kubectl get pod -l app=wordpress</code> to check if the Pod is running</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl get pod -l app=wordpress\nNAME                         READY     STATUS    RESTARTS   AGE\nwordpress-7dd5cbc5d5-tr9ht   1/1       Running   0          1m\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<h4 id=\"expose-wordpress-service\">Expose WordPress service</h4>\n<!-- 2018-10-16 16:35 CEST -->\n\n<p>Logged as gmacario@cloudshell</p>\n<pre><code class=\"language-shell\">kubectl create -f wordpress-service.yaml\n</code></pre>\n<p>Contents of <code>wordpress-service.yaml</code></p>\n<pre><code class=\"language-yaml\">apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: wordpress\n  name: wordpress\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 80\n      protocol: TCP\n  selector:\n    app: wordpress\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl create -f wordpress-service.yaml\nservice &quot;wordpress&quot; created\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<p>Type <code>kubectl get svc -l app=wordpress</code> to chceck if the service is running</p>\n<pre><code>gmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$ kubectl get svc -l app=wordpress\nNAME        TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE\nwordpress   LoadBalancer   10.35.240.204   35.205.34.119   80:32426/TCP   54s\ngmacario@cloudshell:~/github/GoogleCloudPlatform/kubernetes-engine-samples/wordpress-persistent-disks (kubernetes-workshop-218213)$\n</code></pre>\n<p>So the <code>wordpress</code> service will be publicly available as <a href=\"http://35.205.34.119:80\">http://35.205.34.119:80</a></p>\n<h3 id=\"step-5-visit-your-new-wordpress-blog\">Step 5: Visit your new WordPress blog</h3>\n<p>After finding out the IP address of your blog, point your browser to this IP address and you will see the WordPress installation screen as follows:</p>\n<p><img src=\"/images/2018-10-16-wordpress-01.png\" alt=\"wordpress-01\" title=\"Wordpress-01\"></p>\n<p>Select &quot;English (United States)&quot;, then click &quot;Continue&quot;.</p>\n<p><img src=\"/images/2018-10-16-wordpress-02.png\" alt=\"wordpress-02\" title=\"Wordpress-02\"></p>\n<p>Fill in the needed information:</p>\n<ul>\n<li>Site Title: TODO (example: &quot;My Wonderful WordPress site&quot;)</li>\n<li>Username: TODO (example: &quot;admin&quot;)</li>\n<li>Password: TODO (example: &quot;mypass&quot;)</li>\n<li>Your Email: TODO (example: &quot;<a href=\"mailto:&#109;&#121;&#117;&#115;&#x65;&#114;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;\">&#109;&#121;&#117;&#115;&#x65;&#114;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a>&quot;)</li>\n<li>In section &quot;Search Engine Visibility&quot;, check &quot;Discourage search engines from indexing this site</li>\n</ul>\n<p>then click &quot;Install WordPress&quot;</p>\n<p><img src=\"/images/2018-10-16-wordpress-03.png\" alt=\"wordpress-03\" title=\"Wordpress-03\"></p>\n<p>After the initial configuration of WordPress is complete, the following page will be displayed when browsing\n<a href=\"http://35.205.34.119/\">http://35.205.34.119/</a>:</p>\n<p><img src=\"/images/2018-10-16-wordpress-04.png\" alt=\"wordpress-04\" title=\"Wordpress-04\"></p>\n<h3 id=\"step-6-optional-test-data-persistence-on-failure\">Step 6 (Optional) Test data persistence on failure</h3>\n<!-- 2018-10-17 10:43 CEST -->\n\n<p>With PersistentVolumes, your data lives outside the application container.r\nWhen your container becomes unavailable and gets rescheduled onto another compute\ninstance by Kubernetes, GKE will make the PersistentVolume available\non the instance that started running the Pod.</p>\n<p>Logged as gmacario@cloudshell, watch the running pods</p>\n<pre><code class=\"language-shell\">kubectl get pods -o wide -w\n</code></pre>\n<p>Result:</p>\n<pre><code>gmacario@cloudshell:~ (kubernetes-workshop-218213)$ kubectl get pods -o wide -w\nNAME                         READY     STATUS    RESTARTS   AGE       IP           NODE\nmysql-d55697945-h7thb        1/1       Running   0          18h       10.32.2.15   gke-howlernoon-default-pool-844aa4f7-5n4j\nwordpress-7dd5cbc5d5-tr9ht   1/1       Running   0          18h       10.32.2.16   gke-howlernoon-default-pool-844aa4f7-5n4j\n</code></pre>\n<p>If from another terminal we now delete the mysql pod:</p>\n<pre><code class=\"language-shell\">kubectl delete pod -l app=mysql\n</code></pre>\n<p>We should observe that the Deployment controller will create the pod again.</p>\n<pre><code>gmacario@cloudshell:~ (kubernetes-workshop-218213)$ kubectl get pods -o wide\nNAME                         READY     STATUS    RESTARTS   AGE       IP           NODE\nmysql-d55697945-f5lss        1/1       Running   0          58m       10.32.2.17   gke-howlernoon-default-pool-844aa4f7-5n4j\nwordpress-7dd5cbc5d5-tr9ht   1/1       Running   0          19h       10.32.2.16   gke-howlernoon-default-pool-844aa4f7-5n4j\ngmacario@cloudshell:~ (kubernetes-workshop-218213)$\n</code></pre>\n<h3 id=\"step-7-updating-application-images\">Step 7: Updating application images</h3>\n<p>The following commands will update the WordPress container image:</p>\n<pre><code class=\"language-shell\">cd ~/github/GoogleCloudPlatform/kubernetes-engine-samples\ncd wordpress-persistent-disks\nvi wordpress.yaml # Update the image: value\nkubectl apply -f wordpress.yaml\n</code></pre>\n<p>The Deployment controller will cause a new Pod to be created, while the old one will be terminated.</p>\n<h3 id=\"cleaning-up\">Cleaning up</h3>\n<p>Logged as gmacario@cloudshell, delete the <code>wordpress</code> and <code>mysql</code> services:</p>\n<pre><code class=\"language-shell\">kubectl delete service wordpress\nkubectl delete service mysql\n</code></pre>\n<p>Wait for the Load Balancer provisioned for the <code>wordpress</code> service to be deleted:</p>\n<pre><code class=\"language-shell\">gcloud compute forwarding-rules list\n</code></pre>\n<p>Delete the deployments for MySQL and WordPress:</p>\n<pre><code class=\"language-shell\">kubectl delete deployment wordpress\nkubectl delete deployment mysql\n</code></pre>\n<p>Delete the PersistentVolumeClaims for MySQL and WordPress:</p>\n<pre><code class=\"language-shell\">kubectl delete pvc wordpress-volumeclaim\nkubectl delete pvc mysql-volumeclaim\n</code></pre>\n<p>In case you do not need the container cluster any longer,\ntype the following command to delete it:</p>\n<pre><code class=\"language-shell\">gcloud container clusters delete xxx\n</code></pre>\n<h3 id=\"summary\">Summary</h3>\n<p>This article explained how to deploy WordPress with a MySQL backend on a Kubernetes cluster on GCP.</p>\n<!-- markdown-link-check-enable -->\n<!-- EOF -->\n"},"config":{"title":"gmacario.github.io","description":"Gianpaolo Macario's public rants","social":{"github":{"name":"gmacario","link":"https://github.com/gmacario"},"twitter":{"name":"gpmacario","link":"https://www.twitter.com/gpmacario"}}}},"__N_SSG":true}