{"pageProps":{"post":{"title":"Sniffing Bluetooth Low Energy packets on Linux","content":"<p>This post explains how to capture Bluetooth Low Energy packets using Open Source tools.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li>A host acting as BLE central with the following characteristics:<ul>\n<li>OS: a recent Debian or Ubuntu distribution (tested on a <a href=\"https://www.raspberrypi.com/products/raspberry-pi-3-model-b-plus/\">Raspberry Pi 3B+</a> running <a href=\"https://www.raspberrypi.com/software/\">Raspberry Pi OS</a> bullseye)</li>\n<li>Package <code>bluez-utils</code> installed</li>\n<li>A Bluetooth Low Energy adapter supported by the Linux host (tested with the on-board Bluetooth interface of the Raspberry Pi)</li>\n</ul>\n</li>\n<li><a href=\"https://www.wireshark.org/\">Wireshark</a> installed either on the Linux host or on another machine (in this case the OS may also be Windows or macOS)</li>\n</ul>\n<h2 id=\"step-by-step-instructions\">Step-by-step instructions</h2>\n<p>Launch <code>btmon</code> on the host acting as BLE central. In our example, open a terminal on the Raspberry Pi and type the following command:</p>\n<pre><code class=\"language-bash\">sudo btmon -w btmon-$(date &#39;+%Y%m%d-%H%M&#39;).log\n</code></pre>\n<p>This command will create a timestamped file, for instance <code>btmon-20230422-1600.log</code>.\nThe format of the file is similar to\n<a href=\"https://source.android.com/docs/core/connect/bluetooth/verifying_debugging\">Android btsnoop_hci.log</a>.</p>\n<p>Now open another terminal and interact with the BLE device of interest.\nFor instance, launch <code>bluetoothctl</code></p>\n<pre><code class=\"language-bash\">bluetoothctl\n</code></pre>\n<p>and type the following commands:</p>\n<pre><code class=\"language-bash\">scan on\nscan off\nconnect D0:99:BC:DA:66:9F\nconnect D0:99:BC:DA:66:9F\nexit\n</code></pre>\n<p>Result:</p>\n<pre><code class=\"language-text\">pi@rpi3pgm29:~ $ bluetoothctl\nAgent registered\n[bluetooth]# scan on\nDiscovery started\n[CHG] Controller B8:27:EB:A3:CA:84 Discovering: yes\n[NEW] Device 32:EA:0A:94:14:46 32-EA-0A-94-14-46\n[NEW] Device 4B:D7:0C:ED:9A:9F 4B-D7-0C-ED-9A-9F\n[CHG] Device D0:99:BC:DA:66:9F RSSI: -47\n[NEW] Device 6A:E5:9A:F9:9C:39 6A-E5-9A-F9-9C-39\n[NEW] Device 67:58:28:56:38:79 67-58-28-56-38-79\n[NEW] Device 3C:CA:D2:50:9A:9B 3C-CA-D2-50-9A-9B\n[NEW] Device 67:28:E6:A6:14:58 67-28-E6-A6-14-58\n[CHG] Device DE:13:06:8D:1A:5D RSSI: -44\n[NEW] Device 4D:BC:5D:4F:7C:4E 4D-BC-5D-4F-7C-4E\n[NEW] Device 4F:63:A0:CC:4E:12 4F-63-A0-CC-4E-12\n[bluetooth]# scan off\nDiscovery stopped\n[CHG] Controller B8:27:EB:A3:CA:84 Discovering: no\n[CHG] Device 4F:63:A0:CC:4E:12 TxPower is nil\n[CHG] Device 4F:63:A0:CC:4E:12 RSSI is nil\n[CHG] Device 4D:BC:5D:4F:7C:4E TxPower is nil\n[CHG] Device 4D:BC:5D:4F:7C:4E RSSI is nil\n[CHG] Device DE:13:06:8D:1A:5D RSSI is nil\n[CHG] Device 67:28:E6:A6:14:58 TxPower is nil\n[CHG] Device 67:28:E6:A6:14:58 RSSI is nil\n[CHG] Device 3C:CA:D2:50:9A:9B RSSI is nil\n[CHG] Device 67:58:28:56:38:79 RSSI is nil\n[CHG] Device 6A:E5:9A:F9:9C:39 TxPower is nil\n[CHG] Device 6A:E5:9A:F9:9C:39 RSSI is nil\n[CHG] Device D0:99:BC:DA:66:9F RSSI is nil\n[CHG] Device 4B:D7:0C:ED:9A:9F TxPower is nil\n[CHG] Device 4B:D7:0C:ED:9A:9F RSSI is nil\n[CHG] Device 32:EA:0A:94:14:46 RSSI is nil\n[bluetooth]# connect D0:99:BC:DA:66:9F\nAttempting to connect to D0:99:BC:DA:66:9F\n[CHG] Device D0:99:BC:DA:66:9F Connected: yes\nFailed to connect: org.bluez.Error.Failed\n[CHG] Device D0:99:BC:DA:66:9F Connected: no\n[bluetooth]# connect D0:99:BC:DA:66:9F\nAttempting to connect to D0:99:BC:DA:66:9F\n[CHG] Device D0:99:BC:DA:66:9F Connected: yes\nFailed to connect: org.bluez.Error.Failed\n[CHG] Device D0:99:BC:DA:66:9F Connected: no\n[bluetooth]# exit\npi@rpi3pgm29:~ $\n</code></pre>\n<p>The messages exchanged between the Bluetooth host (i.e. the Raspberry Pi) and the Bluetooth controller will be logged on the terminal where you executed the <code>btmon</code> command.</p>\n<!-- TODO: Screenshot -->\n\n<p>When you are satisfied with the results, type <code>^C</code> to stop btmon and look at the btsnoop file that has been created:</p>\n<pre><code class=\"language-text\">pi@rpi3pgm29:~ $ ls -la btmon-20230422-1600.log\n-rw-r--r-- 1 root root 4690 Apr 22 16:02 btmon-20230422-1600.log\npi@rpi3pgm29:~ $\n</code></pre>\n<p>In our case the Raspberry Pi has no display, so we need to download file <code>btmon-20230422-1600.log</code> from a PC where we have Wireshark installed.</p>\n<pre><code class=\"language-text\">gmaca@alpha MINGW64 ~/Downloads\n$ scp rpi3pgm29:btmon-20230422-1600.log .\nbtmon-20230422-1600.log                                               100% 4690   339.5KB/s   00:00\n\ngmaca@alpha MINGW64 ~/Downloads\n$\n</code></pre>\n<p>You may now open the file from Wireshark:</p>\n<p><img src=\"../assets/2023-04-22-btmon-wireshark/2023-04-22-1628-capture.ng.png\" alt=\"Screenshot\"></p>\n<p>You may apply some display filters, for instance <a href=\"https://www.wireshark.org/docs/dfref/b/btatt.html\">btatt</a> (Bluetooth Attribute Protocol)</p>\n<p>Wireshark: Analyze &gt; Display Filters...</p>\n<ul>\n<li>Filter: <code>btatt</code></li>\n</ul>\n<!-- EOF -->\n"},"config":{"title":"gmacario.github.io","description":"Gianpaolo Macario's public rants","social":{"github":{"name":"gmacario","link":"https://github.com/gmacario"},"twitter":{"name":"gpmacario","link":"https://www.twitter.com/gpmacario"}}}},"__N_SSG":true}