{"pageProps":{"post":{"title":"Remote capture of BLE packets with Wireshark","content":"<p>This post explains how to use Open Source tools for capturing Bluetooth Low Energy packets on a remote Linux host and display them in real-time on <a href=\"https://www.wireshark.org/\">Wireshark</a>.</p>\n<h2 id=\"before-you-begin\">Before you begin</h2>\n<p>To follow the directions in this guide, youâ€™ll need the following:</p>\n<ul>\n<li>A Linux host (acting as BLE packet capturing device) with the following characteristics:<ul>\n<li>OS: a recent Debian or Ubuntu distribution</li>\n<li>SSH server installed</li>\n<li>Package <code>bluez-utils</code> installed</li>\n<li>A Bluetooth Low Energy adapter supported by the Linux host</li>\n</ul>\n</li>\n<li><a href=\"https://www.wireshark.org/\">Wireshark</a> installed either on the Linux host or on another machine (in this case the OS may also be Windows or macOS)</li>\n</ul>\n<p>Those instructions were tested on the following configuration:</p>\n<ul>\n<li>Packet capturing device (no display): <code>udoox86gm1</code> (Ubuntu 22.04.2 LTS)</li>\n<li>Wireshark running on <code>alpha</code> (Windows 10 Pro)</li>\n</ul>\n<h2 id=\"reference-documents\">Reference documents</h2>\n<ul>\n<li><a href=\"https://www.wireshark.org/docs/man-pages/sshdump.html\">sshdump(1) Manual Page</a></li>\n<li><a href=\"https://www.comparitech.com/net-admin/tcpdump-capture-wireshark/\">How to run a remote packet capture with Wireshark and tcpdump</a></li>\n<li><a href=\"https://ask.wireshark.org/question/26666/btsnoop-as-pipe-input/\">Btsnoop as pipe input?</a> - ask.wireshark.org, 2022-04-07</li>\n<li><a href=\"https://github.com/wireshark/wireshark/blob/master/doc/extcap_example.py\">wireshark/doc/extcap_example.py</a> - wireshark sources</li>\n<li><a href=\"https://www.tcpdump.org/linktypes.html\">Link-Layer Header Types</a> - tcpdump and libpcap</li>\n</ul>\n<h2 id=\"step-by-step-instructions\">Step-by-step instructions</h2>\n<h3 id=\"install-dumpcap-on-the-remote-capturing-device\">Install <code>dumpcap</code> on the remote capturing device</h3>\n<p>ssh gmacario@udoox86gm1</p>\n<pre><code class=\"language-bash\">sudo apt-get update \\\n  &amp;&amp; sudo apt-get -y install tshark\n</code></pre>\n<h4 id=\"list-interfaces-on-the-remote-capturing-device\">List interfaces on the remote capturing device</h4>\n<p>ssh gmacario@udoox86gm1</p>\n<pre><code class=\"language-bash\">dumpcap --list-interfaces\n</code></pre>\n<p>Result:</p>\n<pre><code class=\"language-text\">gmacario@udoox86gm1:~$ dumpcap --list-interfaces\n1. enp2s0\n2. tailscale0\n3. docker0\n4. veth0228b18\n5. any\n6. lo (Loopback)\n7. virbr0\n8. wlp3s0\n9. bluetooth0\n10. bluetooth-monitor\n11. nflog\n12. nfqueue\n13. dbus-system\n14. dbus-session\ngmacario@udoox86gm1:~$\n</code></pre>\n<p>Make sure that interface <code>bluetooth-monitor</code> is listed. If not, verify that the <code>bluez</code> package is correctly installed and at least one <code>hcixx</code> interface is listed as a result of the <code>hciconfig -a</code> command.</p>\n<h3 id=\"launch-wireshark\">Launch Wireshark</h3>\n<p>Launch Wireshark on your local machine.</p>\n<p><img src=\"https://user-images.githubusercontent.com/75182/236686774-5695edf7-7d3d-4b08-b82f-51a1b5492f76.png\" alt=\"image\"></p>\n<h4 id=\"capturing-from-bluetooth-monitor-on-remote-device\">Capturing from <code>bluetooth-monitor</code> on remote device</h4>\n<p>Wireshark: Capture &gt; Options...</p>\n<p>Select &quot;SSH remote capture&quot; &gt; Settings</p>\n<ul>\n<li>Tab &quot;Server&quot;<ul>\n<li>Remote SSH server address: <code>udoox86gm1</code></li>\n<li>Remote SSH server port: 22</li>\n</ul>\n</li>\n<li>Tab &quot;Authentication&quot;<ul>\n<li>Remote SSH server username: (none)</li>\n<li>Remote SSH server password: (none)</li>\n<li>Path to SSH private key: (none)</li>\n<li>SSH key passphrase: (none)</li>\n<li>ProxyCommand: (none)</li>\n</ul>\n</li>\n<li>Tab &quot;Capture&quot;<ul>\n<li>Remote interface: <code>bluetooth-monitor</code></li>\n<li>Remote capture command: dumpcap</li>\n<li>Use sudo on the remote machine: (unchecked)</li>\n<li>No promiscuous mode: (unchecked)</li>\n<li>Remote capture filter: (empty)</li>\n<li>Packets to capture: 0</li>\n</ul>\n</li>\n<li>Tap &quot;Debug&quot;<ul>\n<li>Set the log level: Message</li>\n<li>Use a file for debug: (empty)</li>\n</ul>\n</li>\n<li>Save parameter(s) on capture start: Yes</li>\n</ul>\n<p>then click &quot;Save&quot;.</p>\n<p>Wireshark: Capture &gt; Start</p>\n<p>The display on Wireshark gets updated as soon as HCI packets are captured from the remote device.</p>\n<p><img src=\"https://user-images.githubusercontent.com/75182/236293319-971638cb-5db4-4147-bdd8-cb89727efdb9.png\" alt=\"image\"></p>\n<p>You may than execute the usual Wireshark commands, such as apply Display Filters, save the packet trace in a <code>*.pcapng</code> file, etc.</p>\n<h4 id=\"example-troubleshoot-ble-connections\">Example: Troubleshoot BLE connections</h4>\n<p>Execute <code>bluetoothctl</code> on the remote capture device:</p>\n<pre><code class=\"language-text\">gmaca@alpha MINGW64 ~\n$ ssh gmacario@udoox86gm1 bluetoothctl\n[bluetooth]#\nAgent registered\n[CHG] Controller 30:E3:7A:65:25:FB Pairable: yes\n[bluetooth]#\n</code></pre>\n<p>then type the following commands (replace <code>$PERIPHERAL_BT_ADDR</code> with the one of the peripheral you want to try connecting):</p>\n<pre><code class=\"language-text\">scan on\nconnect $PERIPHERAL_BT_ADDR\n\n# Wait about 1 minute, then if the connection is still on\ndisconnect\n</code></pre>\n<p>Apply the following Display Filter to focus on the commands and events involved in the connection and disconnection (NOTE: the filter has been formatted into multiple lines for readability, but should be written in one line on Wireshark):</p>\n<pre><code class=\"language-text\">(bthci_cmd.opcode == 0x0005) || \\\n(bthci_cmd.opcode == 0x0405) || \\\n(bthci_cmd.opcode == 0x0406) || \\\n(bthci_cmd.opcode == 0x200d) || \\\n(bthci_cmd.opcode == 0x2043) || \\\n(bthci_evt.code == 0x03) || \\\n(bthci_evt.code == 0x05) || \\\n(bthci_evt.code == 0x0f &amp;&amp; \\\n    ((bthci_evt.opcode == 0x0405) || \\\n    (bthci_evt.opcode == 0x0406) || \\\n    (bthci_evt.opcode == 0x200d) || \\\n    (bthci_evt.opcode == 0x2043))) || \\\n(bthci_evt.code == 0x3e &amp;&amp; bthci_evt.le_meta_subevent == 0x0a)\n</code></pre>\n<p>Result:</p>\n<p><img src=\"https://user-images.githubusercontent.com/75182/236319898-9562e848-ba8b-48ee-9eee-cd4190f087a7.png\" alt=\"image\"></p>\n<h2 id=\"see-also\">See also</h2>\n<ul>\n<li><a href=\"https://tshark.dev/capture/dumpcap\">https://tshark.dev/capture/dumpcap</a></li>\n<li><a href=\"https://www.wireshark.org/docs/man-pages/dumpcap.html\">dumpcap(1) Manual Page</a></li>\n<li><a href=\"https://www.wireshark.org/docs/man-pages/wireshark-filter.html\">wireshark-filter(4) Manual Page</a></li>\n<li><a href=\"https://www.wireshark.org/docs/dfref/\">Wireshark Display Filter Reference</a></li>\n</ul>\n<!-- EOF -->"},"config":{"title":"gmacario.github.io","description":"Gianpaolo Macario's public rants","social":{"github":{"name":"gmacario","link":"https://github.com/gmacario"},"twitter":{"name":"gpmacario","link":"https://www.twitter.com/gpmacario"}}}},"__N_SSG":true}