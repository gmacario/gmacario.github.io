{"pageProps":{"post":{"title":"Installing build.rokers.io","content":"<!-- markdown-link-check-disable -->\n\n<p>This blog post details the steps I made to install the <a href=\"https://build.rokers.io/\">build.rokers.io</a> server on <a href=\"https://aws.amazon.com/\">AWS</a> using <a href=\"https://www.docker.com/\">Docker</a> and <a href=\"https://github.com/gmacario/easy-jenkins\">easy-jenkins</a>.</p>\n<h3 id=\"prepare-the-aws-instance\">Prepare the AWS instance</h3>\n<!-- 2017-06-30 18:00 CEST -->\n\n<p>Login to <a href=\"https://aws.amazon.com/\">https://aws.amazon.com/</a> console using your credentials</p>\n<ul>\n<li>Create a <code>.pem</code> to connect to VM <code>build.rokers.io</code> and slaves</li>\n<li>Create EC2 instance for <code>build.rokers.io</code><ul>\n<li>AWS EC2 c4.2xlarge (8 vCPUs, 15 GiB Memory, Instance Storage: 8 GB)</li>\n<li>Add EBS 300 GB (to be mounted as <code>/var</code>)</li>\n</ul>\n</li>\n<li>Configure firewall on <code>build.rokers.io</code><ul>\n<li>Open incoming ports 22/tcp, 80/tcp, 443/tcp</li>\n</ul>\n</li>\n<li>Create EBS volume for secondary volume <code>/var</code></li>\n<li>Register DNS <code>build.rokers.io</code></li>\n</ul>\n<p>Connect to AWS instance via SSH:</p>\n<pre><code>ssh -i ~/.ssh/rokers_genivi_dev.pem ubuntu@build.rokers.io\n</code></pre>\n<p>Type the following commands to inspect the HW/SW configuration of the master node:</p>\n<pre><code>cat /proc/cpuinfo\ncat /proc/meminfo\ndf -h\nsudo fdisk -l\ncat /etc/os-release\n</code></pre>\n<p>Verify that the following requisites are met:</p>\n<ul>\n<li>CPU: 8 cores</li>\n<li>RAM: 16 GB</li>\n<li>Root Volume: 8 GB</li>\n<li>One additional 300 GB volume</li>\n<li>OS: Ubuntu 16.04.2 LTS 64-bit</li>\n</ul>\n<h3 id=\"prepare-the-guest-os-on-buildrokersio\">Prepare the guest OS on build.rokers.io</h3>\n<p>Logged as <a href=\"mailto:&#117;&#98;&#117;&#110;&#116;&#117;&#64;&#98;&#x75;&#x69;&#108;&#x64;&#x2e;&#114;&#x6f;&#107;&#x65;&#x72;&#115;&#x2e;&#105;&#x6f;\">&#117;&#98;&#117;&#110;&#116;&#117;&#64;&#98;&#x75;&#x69;&#108;&#x64;&#x2e;&#114;&#x6f;&#107;&#x65;&#x72;&#115;&#x2e;&#105;&#x6f;</a> and make sure that the guest OS is up-to-date</p>\n<pre><code>sudo apt update &amp;&amp; sudo apt dist-upgrade\n</code></pre>\n<p>Now install a few additional Ubuntu packages that will be needed to operate the server:</p>\n<pre><code>sudo apt install byobu git htop mc\n</code></pre>\n<p>Login as root</p>\n<pre><code>sudo -i\n</code></pre>\n<p>Logged as <a href=\"mailto:&#114;&#x6f;&#111;&#116;&#x40;&#98;&#x75;&#x69;&#x6c;&#x64;&#x2e;&#114;&#111;&#x6b;&#101;&#114;&#115;&#46;&#105;&#x6f;\">&#114;&#x6f;&#111;&#116;&#x40;&#98;&#x75;&#x69;&#x6c;&#x64;&#x2e;&#114;&#111;&#x6b;&#101;&#114;&#115;&#46;&#105;&#x6f;</a>, format the secondary volume and mount it as <code>/var</code></p>\n<p><strong>NOTE</strong>: You may need to stop a few services before being able to rename <code>/var</code></p>\n<pre><code>fdisk /dev/xvdf\nmkfs.ext4 -L var /dev/xvdf1\nmv /var /var.OLD\necho &#39;LABEL=var    /var/lib/docker  ext4    defaults       0 1&#39; &gt;&gt;/etc/fstab\nmount -a\ncd /var.OLD &amp;&amp; cp -av . /var\n</code></pre>\n<p>Create Swap Space</p>\n<pre><code>dd if=/dev/zero of=/var/swapfile.dat bs=1M count=16384\nmkswap /var/swapfile.dat\nchmod 600 /var/swapfile.dat\necho &#39;/var/swapfile.dat    swap    swap    defaults    0    0&#39; &gt;&gt;/etc/fstab\nswapon -a\n</code></pre>\n<p>Reboot to make sure all the changes are applied</p>\n<h3 id=\"install-docker-and-docker-compose\">Install Docker and docker-compose</h3>\n<p>Logged as <a href=\"mailto:&#x75;&#x62;&#117;&#110;&#x74;&#117;&#64;&#98;&#117;&#105;&#x6c;&#100;&#x2e;&#x72;&#111;&#x6b;&#101;&#x72;&#115;&#x2e;&#105;&#x6f;\">&#x75;&#x62;&#117;&#110;&#x74;&#117;&#64;&#98;&#117;&#105;&#x6c;&#100;&#x2e;&#x72;&#111;&#x6b;&#101;&#x72;&#115;&#x2e;&#105;&#x6f;</a>, install Docker</p>\n<pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\nsudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;\nsudo apt-get update\napt-cache policy docker-ce\nsudo apt-get install -y docker-ce\nsudo systemctl status docker\n</code></pre>\n<p>Logged as <a href=\"mailto:&#x75;&#x62;&#117;&#x6e;&#x74;&#x75;&#x40;&#x62;&#117;&#x69;&#x6c;&#100;&#46;&#114;&#x6f;&#x6b;&#x65;&#x72;&#115;&#x2e;&#105;&#x6f;\">&#x75;&#x62;&#117;&#x6e;&#x74;&#x75;&#x40;&#x62;&#117;&#x69;&#x6c;&#100;&#46;&#114;&#x6f;&#x6b;&#x65;&#x72;&#115;&#x2e;&#105;&#x6f;</a>, allow user <code>ubuntu</code> to run docker without sudo</p>\n<pre><code>sudo usermod -aG docker ${USER}\n</code></pre>\n<p>Logout and log to apply the changes</p>\n<p>Logged as <a href=\"mailto:&#x75;&#98;&#x75;&#110;&#x74;&#117;&#x40;&#x62;&#x75;&#x69;&#x6c;&#100;&#x2e;&#114;&#111;&#x6b;&#101;&#114;&#115;&#46;&#x69;&#111;\">&#x75;&#98;&#x75;&#110;&#x74;&#117;&#x40;&#x62;&#x75;&#x69;&#x6c;&#100;&#x2e;&#114;&#111;&#x6b;&#101;&#114;&#115;&#46;&#x69;&#111;</a>, install docker-compose</p>\n<pre><code>mkdir -p ~/Downloads &amp;&amp; cd ~/Downloads\ncurl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` &gt;docker-compose\nsudo install -m755 docker-compose /usr/local/bin/\ndocker-compose --version\n</code></pre>\n<h3 id=\"install-easy-jenkins\">Install easy-jenkins</h3>\n<p>Logged as <a href=\"mailto:&#x75;&#x62;&#117;&#110;&#x74;&#117;&#x40;&#98;&#117;&#105;&#x6c;&#100;&#46;&#x72;&#111;&#107;&#101;&#114;&#115;&#46;&#x69;&#x6f;\">&#x75;&#x62;&#117;&#110;&#x74;&#117;&#x40;&#98;&#117;&#105;&#x6c;&#100;&#46;&#x72;&#111;&#107;&#101;&#114;&#115;&#46;&#x69;&#x6f;</a>, install and run easy-jenkins</p>\n<pre><code>mkdir -p ~/github/gmacario &amp;&amp; cd ~/github/gmacario\n[ ! -e easy-jenkins ] &amp;&amp; git clone https://github.com/gmacario/easy-jenkins\ncd ~/github/gmacario/easy-jenkins &amp;&amp; git pull --all --prune\n./runme.sh\n</code></pre>\n<p>Result:</p>\n<pre><code class=\"language-shell\">ubuntu@ip-172-31-26-128:~/github/gmacario/easy-jenkins$ ./runme.sh\nWARNING: Cannot find docker-machine - assuming environment variables are already defined\nBuilding myjenkins\nStep 1/13 : FROM jenkins:2.60.1\n...\nSuccessfully tagged easyjenkins_myjenkins:latest\nWARNING: Image for service myjenkins was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating easyjenkins_myjenkins_1 ...\nCreating easyjenkins_myjenkins_1 ... done\nINFO: Initial administrator password: 74eb700cb15d4ce99cc47a60dd694f2d\nubuntu@ip-172-31-26-128:~/github/gmacario/easy-jenkins$\n</code></pre>\n<h3 id=\"expose-jenkins-through-https\">Expose Jenkins through https</h3>\n<!-- 2017-07-04 06:30 CEST -->\n\n<p>Logged as <a href=\"mailto:&#117;&#x62;&#117;&#110;&#x74;&#x75;&#64;&#98;&#117;&#105;&#108;&#100;&#46;&#114;&#x6f;&#x6b;&#101;&#114;&#115;&#x2e;&#105;&#111;\">&#117;&#x62;&#117;&#110;&#x74;&#x75;&#64;&#98;&#117;&#105;&#108;&#100;&#46;&#114;&#x6f;&#x6b;&#101;&#114;&#115;&#x2e;&#105;&#111;</a>, clone the following gist</p>\n<pre><code class=\"language-shell\">mkdir -p ~/gist.github.com/gmacario &amp;&amp; cd ~/gist.github.com/gmacario\n[ ! -e https-build-rokers-io ] &amp;&amp; git clone \\\n    https://gist.github.com/gmacario/2c11a927bfb9fa33326bd20fe28a85c7 \\\n    https-build-rokers-io\ncd ~/gist.github.com/gmacario/https-build-rokers-io &amp;&amp; git pull --all --prune\ndocker-compose up -d\n</code></pre>\n<p><strong>TODO</strong>: Integrate gist into easy-jenkins</p>\n<p>The Jenkins dashboard should be now be accessible as <a href=\"https://build.rokers.io/\">https://build.rokers.io/</a>.</p>\n<h4 id=\"alternative-tunnel-through-ssh\">Alternative: Tunnel through SSH</h4>\n<p>Since port 9080/tcp on build.rokers.io is firewalled, type the following commands on your laptop to create a SSH tunnel to <a href=\"http://build.rokers.io:9080/\">http://build.rokers.io:9080/</a></p>\n<pre><code class=\"language-shell\">ssh \\\n    -i ~/.ssh/rokers_genivi_dev.pem \\\n    -L 29080:localhost:9080 \\\n    ubuntu@build.rokers.io\n</code></pre>\n<p>You will then be able to access the Jenkins dashboard as <a href=\"http://localhost:29080/\">http://localhost:29080/</a>.</p>\n<p><strong>NOTE</strong>: Although SSH tunnel may be sufficient for most of the use-cases, in order to use GitHub based authentication you need to expose the Jenkins Dashboard through https as explained in the section above.</p>\n<h3 id=\"complete-setup-of-jenkins\">Complete setup of Jenkins</h3>\n<p>Now browse <code>${JENKINS_URL}</code> (<a href=\"https://build.rokers.io/\">https://build.rokers.io/</a> or <a href=\"http://localhost:29080/\">http://localhost:29080/</a> if the SSH tunnel was used instead) and complete the configuration of easy-jenkins:</p>\n<ul>\n<li>Paste the initial admin password (you should find it displayed on the terminal where you launched <code>./runme.sh</code>)</li>\n<li>Click <strong>Install suggested plugins</strong></li>\n<li>Create First Admin User, then click <strong>Save and Finish</strong></li>\n<li>If requested, click <strong>Restart</strong> to restart Jenkins</li>\n</ul>\n<p>Reload the page in the browser, then login to Jenkins as user <code>admin</code> using the credentials you have created just before.</p>\n<ul>\n<li>Click on <strong>Build Executor Status</strong></li>\n<li>Configure node <code>master</code><ul>\n<li>Number of executors: <code>4</code> (was 2)</li>\n<li>Labels: <code>docker</code></li>\n<li>Click <strong>Save</strong></li>\n</ul>\n</li>\n</ul>\n<p>Browse <code>${JENKINS_URL}</code> &gt; Manage Jenkins &gt; Configure System</p>\n<ul>\n<li><p>Jenkins Location</p>\n<ul>\n<li>Jenkins URL: <a href=\"https://build.rokers.io/\">https://build.rokers.io/</a></li>\n<li>System Admin e-mail address: (fill in the administrative email provided during the creation of Jenkins user <code>admin</code>)</li>\n</ul>\n</li>\n<li><p>GitHub Pull Requests</p>\n<ul>\n<li>Jenkins URL: <a href=\"https://build.rokers.io/\">https://build.rokers.io/</a></li>\n</ul>\n</li>\n</ul>\n<p><strong>TODO</strong>: Configure mail server used by Jenkins - see <a href=\"http://www.360logica.com/blog/email-notification-in-jenkins/\">http://www.360logica.com/blog/email-notification-in-jenkins/</a></p>\n<h3 id=\"configure-login-to-jenkins-using-github-credentials\">Configure login to Jenkins using GitHub credentials</h3>\n<!-- 2017-07-06 14:00 CEST -->\n\n<p>Prerequisites: Jenkins Dashboard available as <a href=\"https://build.rokers.io/\">https://build.rokers.io/</a></p>\n<p>Follow instructions at <a href=\"https://github.com/gmacario/easy-jenkins/blob/master/docs/configuring-access-control-via-github.md\">https://github.com/gmacario/easy-jenkins/blob/master/docs/configuring-access-control-via-github.md</a></p>\n<p>Visit <a href=\"https://github.com/settings/applications/new\">https://github.com/settings/applications/new</a> to create a GitHub application registration:</p>\n<ul>\n<li>Application name: <code>build.rokers.io</code></li>\n<li>Homepage URL: <code>https://build.rokers.io</code></li>\n<li>Application description: <code>TODO</code></li>\n<li>Authorization callback URL: <code>https://build.rokers.io/securityRealm/finishLogin</code></li>\n</ul>\n<p>then click <strong>Register application</strong></p>\n<p>Keep the result page open, and take note of the following values (they will be used to configure the Github Authentication Plugin as explained in the following section)</p>\n<ul>\n<li>Client ID: xxx</li>\n<li>Client Secret: yyy</li>\n</ul>\n<p>Browse <code>${JENKINS_URL}</code> &gt; Manage Jenkins &gt; Configure Global Security</p>\n<ul>\n<li>Enable security: Yes<ul>\n<li>TCP port for JNLP agents: Fixed: 50000</li>\n<li>Disable remember me: No</li>\n<li>Access Control<ul>\n<li>Security Realm: Github Authentication Plugin<ul>\n<li>Global GitHub OAuth Settings<ul>\n<li>GitHub Web URI: <code>https://github.com</code></li>\n<li>GitHub API URI: <code>https://api.github.com</code></li>\n<li>Client ID: xxx (paste the value from the GitHub page above)</li>\n<li>Client Secret: yyy (paste the value from the GitHub page above)</li>\n<li>OAuth Scope(s): <code>read:org,user:email</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Authorization: Logged-in users can do anything (See NOTE below)<ul>\n<li>Allow anonymous read access: No</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Markup Formatter: Plain text</li>\n<li>Prevent Cross Site Request Forgery exploits: Yes</li>\n<li>Plugin Manager<ul>\n<li>Use browser for metadata download: No</li>\n</ul>\n</li>\n<li>Hidden security warnings<ul>\n<li>Enable Slave-&gt;Master Access Control: Yes</li>\n</ul>\n</li>\n</ul>\n<p>then click <strong>Save</strong>.</p>\n<p><strong>NOTE</strong>: In order to achieve a finer grain of access control choose instead</p>\n<ul>\n<li>Authorization: Project-based Matrix Authorization Strategy</li>\n</ul>\n<p>then add each single GitHub user/group you want to enable.</p>\n<p><strong>IMPORTANT</strong>: Make sure you give all rights at least to one legitimate user, otherwise after clicking &quot;Save&quot; you will not be able to login any more!</p>\n<p>Browse <code>${JENKINS_URL}</code> &gt; Manage Jenkins &gt; Configure Global Security &gt; Security Realm</p>\n<h3 id=\"build-rokers-image-base\">Build rokers-image-base</h3>\n<!-- 2017-07-11 14:10 CEST -->\n\n<p>Create pipeline for building <code>rokers-image-base</code> from sources:</p>\n<ul>\n<li>Click <strong>Open Blue Ocean</strong></li>\n<li>Click <strong>Create a new Pipeline</strong></li>\n<li>Where do you store the code? <strong>Github</strong></li>\n<li>Paste your Github access token, then click <strong>Connect</strong></li>\n<li>Which organization does the repository belong to? <strong>robotrokers</strong> (if you are not a member of &quot;robotrokers&quot;, choose the organization where your forked project <code>robotrokers/rokers-yocto-distro</code>)</li>\n<li>Create a single Pipeline or discover all Pipelines? <strong>New Pipeline</strong></li>\n<li>Choose a repository: <strong>rokers-yocto-distro</strong>, then click <strong>Create Pipeline</strong></li>\n</ul>\n<p>Result: Build SUCCESS (NOTE: It will take about 1h for a scratch build)</p>\n<p>To inspect and/or download the generated artifacts:</p>\n<ul>\n<li>Click <strong>Open Blue Ocean</strong></li>\n<li>Select Pipeline &quot;robotrokers / rokers-yocto-distro&quot;</li>\n<li>Select Branch &quot;dev-rokers&quot;</li>\n<li>Click <strong>Artifacts</strong></li>\n</ul>\n<!-- markdown-link-check-enable -->\n<!-- EOF -->\n"},"config":{"title":"gmacario.github.io","description":"Gianpaolo Macario's public rants","social":{"github":{"name":"gmacario","link":"https://github.com/gmacario"},"twitter":{"name":"gpmacario","link":"https://www.twitter.com/gpmacario"}}}},"__N_SSG":true}